#include <Adafruit_CircuitPlayground.h>

const int touchPins[] = {3, 2, 0, 1, 12, 6, 9, 10};  // Define touch sensor pins
const int ledPins[] = {0, 1, 3, 4, 5, 6, 8, 9};  // Define corresponding NeoPixel pins
const int numTouchPins = sizeof(touchPins) / sizeof(touchPins[0]);
const int touchThreshold = 25;  // Touch threshold value
int delayTime = 1000;  // Initial delay time in milliseconds
int score = 0;

void setup() {
  CircuitPlayground.begin();
  Serial.begin(9600);

  for (int i = 0; i < numTouchPins; i++) {
    pinMode(touchPins[i], INPUT);
  }

  for (int i = 0; i < 10; i++) {
    for (int j = 0; j < 8; j++) {
      if (j == 0 || j == 1 || j == 3 || j == 4 || j == 5 || j == 6 || j == 8 || j == 9) {
        CircuitPlayground.setPixelColor(ledPins[j], 0, 255, 0);  // Green for recalibrated sensors
      } else {
        CircuitPlayground.setPixelColor(ledPins[j], 0, 0, 0);
      }
    }
    delay(100);
    CircuitPlayground.clearPixels();
    delay(100);
  }
}

void loop() {
  int randomIndex = random(0, numTouchPins);

  // Turn on the LED for the random index in purple for debugging
  CircuitPlayground.setPixelColor(ledPins[randomIndex], 128, 0, 128);

  // Wait for 1 second before checking for touch input
  delay(1000);

  // Wait for touch input with threshold
  while (CircuitPlayground.readCap(touchPins[randomIndex]) < touchThreshold) {
    delay(10);
  }

  // Turn off the LED
  CircuitPlayground.setPixelColor(ledPins[randomIndex], 0, 0, 0);

  // Play a tone when any touch sensor is hit
  CircuitPlayground.playTone(1000, 100);

  // Check for losing condition only if the wrong LED is touched
  if (ledPins[randomIndex] != 0 && ledPins[randomIndex] != 1 && ledPins[randomIndex] != 3 &&
      ledPins[randomIndex] != 4 && ledPins[randomIndex] != 5 && ledPins[randomIndex] != 6 &&
      ledPins[randomIndex] != 8 && ledPins[randomIndex] != 9) {
    flashRed();  // Flash red LEDs for wrong LED hits
    delay(1000);  // Add a delay after flashing red
    resetGame();  // Reset the game
  }

  // Increment the score when a touch is detected
  score++;

  // Adjust the delay time to increase game speed
  delayTime = max(100, delayTime - 50);

  delay(delayTime);  // Add a delay before the next round
}

void flashRed() {
  for (int i = 0; i < 5; i++) {
    for (int j = 0; j < 8; j++) {
      if (j == 0 || j == 1 || j == 3 || j == 4 || j == 5 || j == 6 || j == 8 || j == 9) {
        CircuitPlayground.setPixelColor(ledPins[j], 255, 0, 0);  // Red for recalibrated sensors
      } else {
        CircuitPlayground.setPixelColor(ledPins[j], 0, 0, 0);
      }
    }
    delay(100);
    CircuitPlayground.clearPixels();
    delay(100);
  }
}

void resetGame() {
  // Reset game state, score, and delay time
  score = 0;
  delayTime = 1000;

  // Turn off all LEDs
  for (int i = 0; i < 8; i++) {
    CircuitPlayground.setPixelColor(ledPins[i], 0, 0, 0);
  }
}
